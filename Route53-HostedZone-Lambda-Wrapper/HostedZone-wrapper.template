{
  "AWSTemplateFormatVersion": "2010-09-09",
  "Description": "Route53 HostedZone wrapper",
  "Parameters": {
    "Domain": {
      "Type": "String",
      "Default": "corp.local",
      "AllowedPattern" : "[\\-a-zA-Z0-9\\.]*",
      "Description": "Domain name. This template will create a Route53 HostedZone for this domain, that you can modify as you see fit. When you delete the stack, all records in this HostedZone will be automatically deleted along with the zone itself. **Please keep in mind** that AWS charges you every time you create a Hosted Zone, even if you haven't used it.",
      "ConstraintDescription": "Please use letters, numbers, and dashes only."
    }
  },

  "Resources": {

    "VPC": {
      "Type": "AWS::EC2::VPC",
      "Properties": {
        "CidrBlock": "10.0.0.0/16",
        "EnableDnsHostnames": "true",
        "EnableDnsSupport": "true"
      }
    },

    "LambdaExecutionRole": {
      "Type": "AWS::IAM::Role",
      "Properties": {
        "AssumeRolePolicyDocument": {
          "Version": "2012-10-17",
          "Statement": [
            {
              "Effect": "Allow",
              "Principal": {
                "Service": [
                  "lambda.amazonaws.com"
                ]
              },
              "Action": [
                "sts:AssumeRole"
              ]
            }
          ]
        },
        "Policies": [
          {
            "PolicyName": "HostedZoneWrapperPolicy",
            "PolicyDocument": {
              "Version": "2012-10-17",
              "Statement": [
                {
                  "Effect": "Allow",
                  "Action": [
                    "logs:CreateLogGroup",
                    "logs:CreateLogStream",
                    "logs:PutLogEvents"
                  ],
                  "Resource": "arn:aws:logs:*:*:*"
                },
                {
                  "Effect":"Allow",
                  "Action": [
                    "ec2:DescribeVpcs",
                    "ec2:DescribeRegions"
                  ],
                  "Resource": "*"
                },
                {
                  "Effect":"Allow",
                  "Action": [
                    "route53:CreateHostedZone",
                    "route53:ListHostedZones",
                    "route53:UpdateHostedZoneComment",
                    "route53:AssociateHostedZoneWithVPC"
                  ],
                  "Resource": "*"
                },
                {
                  "Effect":"Allow",
                  "Action": [
                    "route53:GetChange"
                  ],
                  "Resource": "arn:aws:route53:::change/*"
                },
                {
                  "Effect": "Allow",
                  "Action": [
                    "route53:GetHostedZone",
                    "route53:DeleteHostedZone",
                    "route53:ListResourceRecordSets",
                    "route53:ChangeResourceRecordSets",
                    "route53:ChangeTagsForResource"
                  ],
                  "Resource": "arn:aws:route53:::hostedzone/*"
                }
              ]
            }
          }
        ]
      }
    },
    "HostedZoneWrapper": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Code": {
          "ZipFile": {
            "Fn::Join": [
              "\n",
              [

"import json",
"import cfnresponse",
"import boto3",
"import random",
"import string",
"import sys",
"",
"def handler(event, context):",
"	if event['RequestType'] == 'Delete':",
"		client = boto3.client('route53')",
"		hostedZoneId = event['PhysicalResourceId']",
"		zones = client.list_hosted_zones()",
"		myZone = filter(lambda find_rec: find_rec['Id'] == '/hostedzone/'+hostedZoneId, zones['HostedZones'])",
"		if len(myZone) == 1:",
"			try:",
"				print 'Listing resource record sets..'",
"				response = client.list_resource_record_sets (",
"					HostedZoneId = hostedZoneId",
"				)",
"				if len(response['ResourceRecordSets']) > 2:",
"					print 'Iterating over records to delete..'",
"					for record in response['ResourceRecordSets']:",
"						if record['Type'] != 'SOA' and record['Type'] != 'NS':",
"							print 'Deleting record: ', record",
"							result = client.change_resource_record_sets (",
"								HostedZoneId = hostedZoneId,",
"								ChangeBatch = {",
"									\"Changes\": [",
"										{",
"											\"Action\": \"DELETE\",",
"											\"ResourceRecordSet\": record",
"										}",
"									]",
"								}",
"							)",
"				print 'Deleting the zone itself..'",
"				response = client.delete_hosted_zone (",
"					Id = hostedZoneId",
"				)",
"				print 'Deleted the zone successfully.'",
"				responseData = {}",
"				responseData['HostedZoneId'] = hostedZoneId",
"				cfnresponse.send(event, context, cfnresponse.SUCCESS, responseData, event['PhysicalResourceId'])",
"			except Exception as err:",
"				print 'Error encountered: ', err, sys.exc_info()[0]",
"				responseData = {}",
"				cfnresponse.send(event, context, cfnresponse.FAILED, responseData, event['PhysicalResourceId'])",
"		else:",
"			print 'Zone ID lookup did not return exactly one result, bailing.'",
"			responseData = {}",
"			cfnresponse.send(event, context, cfnresponse.SUCCESS, responseData, event['PhysicalResourceId'])",
"",
"	elif event['RequestType'] == 'Create':",
"		client = boto3.client('route53')",
"		kwargs = {}",
"		z_name=event['ResourceProperties']['Name']",
"		if z_name[-1] != '.':",
"			z_name = z_name + '.'",
"		kwargs['Name'] = z_name",
"		kwargs['CallerReference'] = ''.join(random.choice(string.ascii_uppercase + string.digits) for _ in range(8))",
"		hzconf = event['ResourceProperties'].get('HostedZoneConfig', None)",
"		region = event['ResourceProperties'].get('Region', None)",
"		vpc = event['ResourceProperties'].get('VPC', None)",
"		hztags = event['ResourceProperties'].get('HostedZoneTags', None)",
"		if vpc:",
"			kwargs['VPC'] = vpc",
"		if hzconf:",
"			hzc1 = {}",
"			hzc1['Comment'] = hzconf.get('Comment', None)",
"			pz = hzconf.get('PrivateZone', None)",
"			if pz:",
"				hzc1['PrivateZone'] = json.loads(pz)",
"			kwargs['HostedZoneConfig'] = hzc1",
"		try:",
"			print 'Creating the Hosted Zone..'",
"			response = client.create_hosted_zone (**kwargs)",
"			hostedZoneId1 = response['HostedZone']['Id']",
"			hostedZoneId = str.split(str(hostedZoneId1),'/')[2]",
"			print 'New Hosted Zone created:', hostedZoneId",
"			responseData = {}",
"			responseData['HostedZoneId'] = hostedZoneId",
"			ds = response.get('DelegationSet', None)",
"			if ds:",
"				responseData['NameServers'] = ds['NameServers']",
"			else:",
"				responseData['NameServers'] = ['Private zone created', 'No DelegationSet returned', '', '']",
"			if hztags:",
"				print 'HostedZoneTags is supplied; applying tags to the new zone.'",
"				kwags = {}",
"				kwags['ResourceType'] = 'hostedzone'",
"				kwags['ResourceId'] = hostedZoneId",
"				kwags['AddTags'] = hztags",
"				response = client.change_tags_for_resource(**kwags)",
"			cfnresponse.send(event, context, cfnresponse.SUCCESS, responseData, hostedZoneId)",
"		except Exception as err:",
"			print 'Error encountered: ', err, sys.exc_info()[0]",
"			responseData = {}",
"			hostedZoneId = 'XXX'",
"			responseData['HostedZoneId'] = hostedZoneId",
"			cfnresponse.send(event, context, cfnresponse.FAILED, responseData, hostedZoneId)",
"	else:",
"		print 'RequestType is not Create or Delete; bailing.'",
"		cfnresponse.send(event, context, cfnresponse.SUCCESS, responseData, event['PhysicalResourceId'])"


              ]
            ]
          }
        },
        "Handler": "index.handler",
        "Runtime": "python2.7",
        "Timeout": "180",
        "Role": {
          "Fn::GetAtt": [
            "LambdaExecutionRole",
            "Arn"
          ]
        }
      }
    },
    "WrappedDNS": {
      "Type": "Custom::LambdaCallout",
      "Properties": {
        "ServiceToken": {
          "Fn::GetAtt": [
            "HostedZoneWrapper",
            "Arn"
          ]
        },
        "HostedZoneConfig": {
          "Comment": "My hosted zone, created by Lambda HostedZone wrapper",
          "PrivateZone": "true"
        },
        "HostedZoneTags" : [{
          "Key": "SampleKey1",
          "Value": "SampleValue1"
        },
        {
          "Key": "SampleKey2",
          "Value": "SampleValue2"
        }],
        "Name": {
          "Ref": "Domain"
        },
        "VPC": {
          "VPCRegion": { "Ref" : "AWS::Region" },
          "VPCId": { "Ref": "VPC" }
        }
      }
    }
  },

  "Outputs": {
    "HostedZoneId": {
      "Description": "Hosted Zone ID",
      "Value": {
        "Fn::GetAtt": [
          "WrappedDNS",
          "HostedZoneId"
        ]
      }
    },
    "NameServer1": {
      "Description": "Hosted Zone NS1",
      "Value": {
        "Fn::Select": [
          "0",
          { "Fn::GetAtt": [ "WrappedDNS", "NameServers" ] }
        ]
      }
    },
    "NameServer2": {
      "Description": "Hosted Zone NS2",
      "Value": {
        "Fn::Select": [
          "1",
          { "Fn::GetAtt": [ "WrappedDNS", "NameServers" ] }
        ]
      }
    },
    "NameServer3": {
      "Description": "Hosted Zone NS3",
      "Value": {
        "Fn::Select": [
          "2",
          { "Fn::GetAtt": [ "WrappedDNS", "NameServers" ] }
        ]
      }
    },
    "NameServer4": {
      "Description": "Hosted Zone NS2",
      "Value": {
        "Fn::Select": [
          "3",
          { "Fn::GetAtt": [ "WrappedDNS", "NameServers" ] }
        ]
      }
    }
  }
}